{
  "name": "Bing-bash",
  "tagline": "Bash functions library",
  "body": "# bing-bash  \r\n  \r\n## ![bingbash](https://img.shields.io/badge/bing-bash-orange.svg?style=flat-square) Bash functions library\r\n  \r\n\r\n* [About](#about)\r\n* [Quick start](#quick-start)\r\n* [Description](#description)\r\n* [Usage](#usage)\r\n* [Conventions](#conventions)\r\n  - [Naming conventions](#naming-conventions)\r\n  - [Positional parameters](#positional-parameters)\r\n  - [Short options](#short-options)\r\n  - [Long options](#long-options)\r\n  - [Parameters](#parameters-non-options)\r\n* [List of functions](#list-of-functions)\r\n* [Features](#features)\r\n  \r\n  \r\n### About  \r\nLibrary of bash functions comprising routines for dealing with variables, arrays, strings, symbols table, etc.  \r\n  \r\n  \r\n### Quick Start\r\nJust download and source the functions you need.   \r\nApart from few, all functions are standalone, they don't depend on any other function or file from this library. Those that are, have their dependencies specified in the corresponding help section.  \r\n  \r\n  \r\n### Description\r\nThe library is composed using bash's (4.3) features, without unnecessary forking (when possible) or usage of external tools (unless faster). Single process bash shell was in high regard as well as bash's specific functionalities. Made and tested with bash 4.3 (and 4.4-beta).  \r\n  \r\n  \r\n### Usage\r\nFunctions are meant to be sourced, though some of them could be executed as well. All functions are standalone and they don't need any other function or file from this library (unless explicitly stated), but as a convenience, there are some function management capabilities available (see `bing-bash`, `load` and `bb` files).\r\n  \r\n* Files containing functions can be sourced individually and then functions can be called as usual. This way functions will, of course, stay resident, but at least all the environment-polluting code will make the functions instantly responsive.\r\n* One level down in comparison to the above is to have functions marked for autoloading; although not a true autoloading, as in other shells. Namely, when marked for autoloading, a stand-in, eponymous function will be created, only a few lines long (as opposed to the whole function's body) whose purpose is to source its complete definition when first called.\r\n* The last and most environment friendly way is to call functions through `bb` function dispatcher that will load called function, pass arguments to it and unload it when done. This way is also convenient during fiddling with function's body, as it always sources the current function's code.  \r\n  \r\n  \r\n### Conventions\r\n  \r\n#### Naming Conventions\r\nNames of all functions are prefixed with `bb_` as an attempt to pseudo-namespace them so they won't collide with other eponymous tools, scripts and functions. On the other hand, files that define these functions are named without such prefix, with a `.bash` extension added. This makes it easy to separate files that contain functions from other files; the exceptions to this is `load` file that has no extension (because it contains autoloading function code).  \r\n  \r\nIf you're sure no naming collisions exist on your system, you can, of course, make aliases (e.g. `alias typeof=bb_typeof`) to shorten function's names; some aliases are already defined in `bing_aliases` file. \r\n  \r\nNames of variables local to functions all have `bb` prefix followed by capital letter (e.g. `bbParam`), so avoid passing similarly named parameters to minimize problems.\r\n  \r\nNames of environment variables used are all upper-cased and have `BING_` prefix (e.g. `BING_FUNC`).\r\n  \r\n#### Positional Parameters\r\nPositional parameters are divided into options and non-option parameters.  \r\nOptions are further divided into:  \r\n* flags (options without arguments)  \r\n* options that have required argument  \r\n* options that have an optional argument  \r\n  \r\nOptions are also divided into short (`-o`) and long options (`--long-option`).  \r\n  \r\nNon-option parameters can be explicitly separated from options by using double dash `--`; for example, `function -options -- PARAM1 PARAM2` in which case everything after '--' is treated as a non-option parameter, even if it starts with '-' or '--'. Otherwise (i.e. without '--'), **order** of options and non-option parameters is not important (unless specifically noted for a particular function).  \r\n* If the same option is repeated, the latter will overshadow the former occurrence.  \r\n* If unrecognized option is supplied, it will be discarded.  \r\n  \r\n#### Short Options\r\nA short option begins with a dash (-) followed by a single character.\r\n* If the option has **no argument** it is called a simple option or a flag e.g. `-x`.  \r\n* If the option has **required** argument it may be written:  \r\n  - *immediately* after the option character, e.g. `-rREQ`  \r\n  - as the *following* parameter, e.g. `-r REQ`  \r\n* If the option has **optional** argument, it must be written *immediately* after the option character, e.g. `-rOPT`  \r\n   \r\nIt is possible to specify several short options after one '-' (compounded short options), as long as all (except possibly the last) options are flags: `-xyz`, `-xyzr req`  \r\n  \r\n#### Long Options\r\nA long option normally begins with double dash (--) followed by the long option name (which is a string of alphanumerics and dash).  \r\n* If the long option has **no argument** it is called a simple option or a flag e.g. `--long-option`  \r\n* If the option has *required* argument, it may be written:\r\n  - as the *following* argument, e.g. `--option REQ`\r\n  - after the *equal sign*, e.g. `--option=REQ`\r\n* If the option has **optional** argument, it must be written after the *equal sign*, e.g. `--option=OPT`  \r\n   \r\nLong options may be **abbreviated**, as long as the abbreviation is \r\n  *unambiguous*, e.g. `--long` instead of `--long-option`.\r\n   \r\n    \r\n>     \r\nNOTE: Important thing to know about this library is that all functions will parse canonically provided parameters (i.e. no compounded short options, no abbreviations of long options) internally, in the body of function itself, which means faster execution. Otherwise `getopt` utility will be called to parse parameters, which may sometimes result in slower function's execution.  \r\n  \r\n#### Parameters (non-options)\r\nA parameter to a function can be passed by name or by value.  \r\n* Array variables are always passed by name (without $).  \r\n* Scalar variables can be passed by name (without $) or by value (with $, as usual).  \r\n  \r\nAs a convenience, instead of passing a variable by value, possibly with quotations (e.g. `function \"$var\"`) you can just type `function var` to pass it by name. Naturally, a value can also be passed directly (`function \"abcd\"`), in which case there may be unexpected results if it happens that a variable by that name (variable called `abcd`) already exist. (Ah, the price for typing less).  \r\n  \r\nSince arrays cannot be passed around in bash (nor exported), they are always passed by name (without $). Trying to pass an array with `$array` will only pass its zeroth element (if any) and passing an array as `${array[@]}` could work at the cost of having its indices/keys discarded; still not very practical, especially when two or more arrays need to be passed to a function.  \r\n#### Common options\r\nThese 3 options, in long format, are guaranteed to be accepted in all functions:  \r\n`--help` show help  \r\n`--usage` show usage  \r\n`--version` show version  \r\nShort options equivalents of above options, `-h`, `-u`, `-V`, are common, but are not to be relied upon as they might've been used for something else entirely.  \r\n  \r\nMost functions also accept setting of verbosity level through  \r\n`-v, --verbosity LEVEL` option, followed by LEVEL option-argument, which is one of these numbers: 0 (quiet), 1(fatal), 2(errors), 3(debug).  \r\n  \r\nIf a function accepts user supplied name for a variable that will hold function's resulting value, this is always achieved through  \r\n`-o, --out NAME` option followed by a required argument that must be valid identifier. If the argument is a number 1-9 (inclusive) the output will be send to this file descriptor.\r\n\r\n  \r\n### List of functions  \r\n(Some functions encompass functionalities, that might've been split across several functions, as subroutines)  \r\n  \r\n* `bb_typeof`   \r\nPretty dump arrays and their attributes is its main purpose.  \r\nType and qualify given string: identify it as set or unset variable, array, shell keyword, etc. With `-t` option, only the type, as a single word is returned: unset, variable, indexed, associative; also those returned by type builin: alias, keyword, function, builtin or file.  \r\n(feat: [d][] [h][] [o][] [m][] [p][] [s][] [t][])  \r\n  \r\n* `bb_explode`  \r\nConvert a string to array by splitting it by substring which can be a single or multi-character substring. Also convert a string to array of individual characters.  \r\n  \r\n* `bb_implode`  \r\nConvert an array to string. Specify wrapping and glue characters.  \r\n  \r\n* `bb_array_clone`  \r\nClone an array.  \r\n\r\n* `bb_array_merge`  \r\nMerge two or more arrays of any type (indexed and/or associative). User can force the type of resulting array and specify merging mode (reindex, skip, overwrite, append).  \r\n  \r\n* `bb_array_convert`  \r\nConvert indexed to associative array or vice versa.  \r\n  \r\n* `bb_array_remove`  \r\nRemove array elements. Remove element with specified index/key from an array. Remove several elements by specifying them as comma-separated list of integers and/or ranges. Optionally, if name for the resulting array is specified, the original array will be left intact.  \r\n  \r\n* `bb_array_shift`  \r\nShift the first value of the array off and return it.  \r\n  \r\n* `bb_array_sort`  \r\nSort array different ways. Remove duplicated values from an array (make unique).  \r\n* `in_array`  \r\nChecks if a value (variable or array) exists in an array.  \r\n    \r\n* `bb_range`  \r\nGenerate numeric sequences from list of ranges and individual integers (e.g. 1,4-8,10,15-20,25-30). Specify numbers base and divider, prefix, suffix characters.  \r\n  \r\n* `bb_venn`  \r\nVenn diagrams related functions: union, intersection, difference, complement.  \r\n  \r\n* `bb_strpos`  \r\nFind the position of the first occurrence of a substring in a string.  \r\n  \r\n* `bb_pad`  \r\nPad a string by appending char(s) after each character of the string. \r\n\r\n* `bb_load`  \r\nSource functions. Mark functions for autoloading. Resolve functions path.  \r\n  \r\n* `bb_trim`  \r\nTrim leading, trailing and intermediate whitespace.  \r\n  \r\n* `bb_to`  \r\nConversions between hex, octal, decimal, ascii.  \r\n  \r\n* `bb_sql`  \r\nRoutines dealing with sqlite database.  \r\n  \r\n* `bb_is`  \r\nPattern matching subroutines: qualify string as alphabetic, alpha-numeric, etc.; qualify name as valid identifier, filename, path; qualify variables as set, null, indexed, associative, etc.    \r\n  \r\n* `bb_get`  \r\nCollect information about variables, their attributes, arrays, variable's length and type, etc.  \r\n  \r\n* `bb_array`  \r\nArray quick dump.  \r\nIdentify array as indexed, associative, numeric.  \r\nReturn keys, values, empty elements.  \r\nRemove unset elements.  \r\nRe-index a sparse array.  \r\nPack and squeeze an array.  \r\n  \r\n  \r\n### Features  \r\nImplement or check that everything is as described above.  \r\n`c` completions  \r\n`d` documentation in comments (of function's file)  \r\n`h` current --help option  \r\n`o` output result to given var or FD  \r\n`m` man page  \r\n`n` pass variables by name or value  \r\n`p` positionals\\*  \r\n`s` standalone  \r\n`t` tests  \r\n`v` verbosity levels  \r\n`?` option to get parameters from stdin  \r\n\r\n\\*  parse positional params, but if any left (compounded short options, abbreviated long options) use `getopt`  \r\n  \r\n  \r\n[c]: #features  \"completions\"\r\n[d]: #features  \"documentation\"\r\n[h]: #features  \"help\"\r\n[o]: #features  \"output\"\r\n[m]: #features  \"man\"\r\n[n]: #features  \"pass-by-name\"\r\n[p]: #features  \"positionals\"\r\n[s]: #features  \"standalone\"\r\n[t]: #features  \"tests\"\r\n[v]: #features  \"verbosity\"\r\n  \r\n  \r\n### Definitions\r\n(used usually in function's comments, help section, etc.)   \r\n\r\n**identifier**  Variable's name consisting of alphabetic characters, numbers and underscore char, but 1st char must not be a number. `[[:alpha:]_][[:alnum:]_]+`  \r\n**char**  Any character.  \r\n**string**  Sequence of characters.  \r\n**substring**  Sequence of characters that are part of the string.  \r\n**name**  Portable sequence of characters. `[[:alpha:].-_]+`  \r\n**filename**  POSIX portable filename, hyphen not 1st char. `[[:alnum:]._][[:alnum:].-_]+`  \r\n**pathname**  POSIX portable filename, hyphen not 1st char. `[[:alnum:]._/][[:alnum:].-_/]+`  \r\n**alias**  POSIX portable name of alias. `[[:alnum:].-_/!%,@]`  \r\n**var**  Name of scalar or array variable.  \r\n**scalar**  Name of scalar variable.  \r\n**array**  Name of array variable.  \r\n**assoc**  Array whose keys are strings.    \r\n**indexed**  Array whose indexes are numberic.  \r\n**packed array**  Indexed array with contiguous indexes that start from 0.  \r\n**sparse array**  Indexed array with non-contiguous indexes.  \r\n**whitespace**  Space, tab, vertical tab, new line.  \r\n**flag**  Option with 2 states: present/absent.  \r\n**argument**  Argument to an option.  \r\n**required**  Required argument.  \r\n**optional**  Optional argument.  \r\n  \r\n  \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}